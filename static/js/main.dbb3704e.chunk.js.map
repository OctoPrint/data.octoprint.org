{"version":3,"sources":["components/DarkModeToggle.js","hooks/useLocalStorage.js","components/DaysProvider.js","components/DaysToggle.js","util/data.js","components/Stats.js","util/charts.js","components/Piechart.js","components/InstanceStats.js","components/PrintingStats.js","components/PythonStats.js","components/ServerStats.js","components/ClientStats.js","components/FirmwareStats.js","App.js","reportWebVitals.js","index.js"],"names":["DarkModeToggle","props","useState","darkMode","setDarkMode","Tooltip","title","IconButton","onClick","onChange","color","size","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","daysContext","React","undefined","DaysProvider","children","days","setDays","useProvideDays","Provider","useDays","DaysToggle","Button","BASE","fetchData","file","a","url","axios","get","data","Stats","loading","setLoading","since","setSince","lastUpdate","setLastUpdate","useEffect","fetchStats","stats","then","_since","_generated","onData","Content","style","display","justifyContent","CircularProgress","Typography","variant","Card","CardHeader","CardContent","COLORS","dateFormatter","date","moment","format","countFormatter","count","millify","durationFormatter","duration","humanize","piechartLegendFormatter","v","entry","index","payload","name","percent","percentage","asPercentage","piechartLabelRenderer","x","y","fill","textAnchor","alignmentBaseline","Math","round","Piechart","theme","useTheme","isSmallScreen","useMediaQuery","breakpoints","down","legendBelow","ResponsiveContainer","width","aspect","PieChart","Legend","formatter","layout","align","verticalAlign","contentStyle","palette","background","paper","text","primary","itemStyle","Pie","label","startAngle","endAngle","outerRadius","innerRadius","stroke","nameKey","dataKey","map","Cell","length","id","InstanceStats","setCount","instancesData","setInstancesData","versionsData","setVersionsData","stableVersionsData","setStableVersionsData","rcVersionsData","setRcVersionsData","d","versions","stableVersions","rcVersions","otherVersions","version","otherStableVersions","otherRcVersions","VERSION_COUNT","push","includes","instances","histogram","slice","start","valueOf","AreaChart","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDashArray","XAxis","angle","interval","domain","scale","type","tickFormatter","height","axisLine","secondary","tickLine","tick","YAxis","labelFormatter","Area","fillOpacity","Grid","container","xs","md","PrintingStats","total","setTotal","printingData","setPrintingData","totals","py2VersionsData","setPy2VersionsData","py3VersionsData","setPy3VersionsData","py2vs3Data","setPy2vs3Data","py2","py3","py2Versions","py3Versions","otherPy2Versions","otherPy3Versions","startsWith","python2","python3","LineChart","Line","dot","strokeWidth","LOOKUP","linux","windows","macos","freebsd","ServerStats","coreData","setCoreData","osData","setOsData","bitsData","setBitsData","cores","os","bits","otherCores","coreStats","Object","keys","sort","b","forEach","ClientStats","browserTop10Data","setBrowserTop10Data","osTop10Data","setOsTop10Data","browserTop10","osTop10","otherBrowser","otherOs","browser","firmwareTop10Data","setFirmwareTop10Data","notableFirmwareData","setNotableFirmwareData","firmwareTop10","otherFw","notable","matcher","indexOf","fw","names","FW_COUNT","n","Offset","styled","mixins","toolbar","App","noSsr","darkModeTheme","createTheme","mode","ThemeProvider","Main","handleDarkModeToggle","Navbar","AppBar","Toolbar","sx","flexWrap","Box","flexGrow","CssBaseline","Container","component","maxWidth","mt","lg","mb","my","textAlign","p","Link","href","target","rel","underline","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbb3704e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport IconButton from \"@mui/material/IconButton\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport DarkModeIcon from \"@mui/icons-material/Brightness4\";\nimport LightModeIcon from \"@mui/icons-material/Brightness7\";\n\nexport default function DarkModeToggle(props) {\n    const [darkMode, setDarkMode] = useState(props.darkMode);\n\n    const handleDarkModeToggle = () => {\n        props.onChange(!darkMode);\n        setDarkMode(!darkMode);\n    };\n\n    return (\n        <Tooltip title=\"Toggle dark mode\">\n            <IconButton onClick={handleDarkModeToggle} color=\"inherit\" size=\"large\">\n                { darkMode ? <LightModeIcon /> : <DarkModeIcon /> }\n            </IconButton>\n        </Tooltip>\n    );\n}","import { useState } from \"react\";\n\nexport default function useLocalStorage(key, initialValue) {\n  // Source: https://usehooks.com/useLocalStorage/\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that\n  // persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n      setStoredValue(valueToStore);\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import * as React from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nconst daysContext = React.createContext(undefined)\n\nexport default function DaysProvider({children}) {\n    const days = useProvideDays()\n    return <daysContext.Provider value={days}>{children}</daysContext.Provider>\n}\n\nexport function useDays() {\n    return React.useContext(daysContext)\n}\n\nexport function useProvideDays() {\n    const [days, setDays] = useLocalStorage(\"days\", 30)\n\n    return {days, setDays}\n}\n\n","import React from \"react\";\n\nimport Tooltip from \"@mui/material/Tooltip\";\nimport Button from \"@mui/material/Button\";\nimport {useDays} from \"./DaysProvider\";\n\nexport default function DaysToggle() {\n    const {days, setDays} = useDays()\n\n    const handleDaysToggle = () => {\n        const newDays = days === 7 ? 30 : 7;\n        setDays(newDays);\n    };\n\n    return (\n        <Tooltip title=\"Switch between 30 and 7 days view\">\n            <Button color=\"inherit\" onClick={handleDaysToggle}>{days === 30 ? \"Switch to 7 days\" : \"Switch to 30 days\"}</Button>\n        </Tooltip>\n    )\n}","import axios from \"axios\";\n\nconst BASE = \"https://data.octoprint.org/export/\";\n\nexport default async function fetchData(file) {\n    const url = BASE + file;\n    return await (await axios.get(url)).data;\n}\n\nexport async function fetchInstanceStats(days) {\n    return await fetchData(`instance_stats_${days}d.json`);\n}\n\nexport async function fetchPluginStats(days) {\n    return await fetchData(`plugin_stats_${days}d.json`);\n}\n\nexport async function fetchPrintingStats(days) {\n    return await fetchData(`printing_stats_${days}d.json`);\n}\n\nexport async function fetchPythonStats(days) {\n    return await fetchData(`python_stats_${days}d.json`);\n}\n","import React, { useState, useEffect } from \"react\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\n\nimport fetchStats from \"../util/data\";\nimport { Typography } from \"@mui/material\";\n\nexport default function Stats(props) {\n    const [ loading, setLoading ] = useState(true);\n    const [ since, setSince ] = useState();\n    const [ lastUpdate, setLastUpdate ] = useState();\n\n    useEffect(() => {\n        fetchStats(props.stats).then((data) => {\n            setSince(data._since);\n            setLastUpdate(data._generated);\n            props.onData(data);\n            setLoading(false);\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.stats]);\n\n    const Content = () => {\n        if (loading) {\n            return (\n                <div style={{ display: \"flex\", justifyContent: \"center\", }}>\n                    <CircularProgress />\n                </div>\n            )\n        } else {\n            return (\n                <>\n                    {props.children}\n                    <Typography variant=\"caption\">Based on usage data from {since} until {lastUpdate}</Typography>\n                </>\n            )\n        }\n    }\n\n    return (\n        <Card style={{}}>\n            <CardHeader title={props.title} />\n            <CardContent>\n                <Content />\n            </CardContent>\n        </Card>\n    );\n}","import millify from \"millify\";\nimport moment from \"moment\";\n\n// classic grafana palette\nexport const COLORS = [\n    '#7EB26D', // 0: pale green\n    '#EAB839', // 1: mustard\n    '#6ED0E0', // 2: light blue\n    '#EF843C', // 3: orange\n    '#E24D42', // 4: red\n    '#1F78C1', // 5: ocean\n    '#BA43A9', // 6: purple\n    '#705DA0', // 7: violet\n    '#508642', // 8: dark green\n    '#CCA300', // 9: dark sand\n    '#447EBC',\n    '#C15C17',\n    '#890F02',\n    '#0A437C',\n    '#6D1F62',\n    '#584477',\n    '#B7DBAB',\n    '#F4D598',\n    '#70DBED',\n    '#F9BA8F',\n    '#F29191',\n    '#82B5D8',\n    '#E5A8E2',\n    '#AEA2E0',\n    '#629E51',\n    '#E5AC0E',\n    '#64B0C8',\n    '#E0752D',\n    '#BF1B00',\n    '#0A50A1',\n    '#962D82',\n    '#614D93',\n    '#9AC48A',\n    '#F2C96D',\n    '#65C5DB',\n    '#F9934E',\n    '#EA6460',\n    '#5195CE',\n    '#D683CE',\n    '#806EB7',\n    '#3F6833',\n    '#967302',\n    '#2F575E',\n    '#99440A',\n    '#58140C',\n    '#052B51',\n    '#511749',\n    '#3F2B5B',\n    '#E0F9D7',\n    '#FCEACA',\n    '#CFFAFF',\n    '#F9E2D2',\n    '#FCE2DE',\n    '#BADFF4',\n    '#F9D9F9',\n    '#DEDAF7',\n  ];\n\nexport const dateFormatter = (date) => {\n    return moment(date).format(\"YYYY-MM-DD HH:00\");\n}\n\nexport const countFormatter = (count) => {\n    return millify(count);\n}\n\nexport const durationFormatter = (duration) => {\n    return moment.duration(duration * 1000).humanize();\n}\n\nexport const piechartLegendFormatter = (v, entry, index) => {\n    const {value, name, percent} = entry.payload;\n    const percentage = asPercentage(percent);\n    return `${name}: ${percentage}% (${countFormatter(value)})`;\n}\n\nexport const piechartLabelRenderer = (props) => {\n    const {x, y, fill, textAnchor, name, percent} = props;\n    const percentage = asPercentage(percent);\n    return (\n        <text x={x} y={y} fill={fill} alignmentBaseline=\"middle\" textAnchor={textAnchor}>{name} ({percentage}%)</text>\n    );\n} \n\n\nexport const asPercentage = (percentage) => {\n    return Math.round(percentage * 100, 2);\n}\n","import React from \"react\";\n\nimport { useTheme } from \"@mui/material/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { ResponsiveContainer, PieChart, Pie, Cell, Tooltip, Legend } from 'recharts';\nimport { COLORS, piechartLegendFormatter, piechartLabelRenderer } from '../util/charts';\n\nexport default function Piechart(props) {\n    const theme = useTheme();\n\n    const isSmallScreen = useMediaQuery(theme.breakpoints.down('lg'));\n    const legendBelow = isSmallScreen || props.legendBelow;\n\n    return (\n        <ResponsiveContainer width=\"100%\" aspect={isSmallScreen ? 1 : 1.78}>\n            <PieChart>\n                {legendBelow ? (\n                    <Legend formatter={piechartLegendFormatter} />\n                ) : (\n                    <Legend layout=\"vertical\" align=\"right\" verticalAlign=\"top\" formatter={piechartLegendFormatter} />\n                )}\n                <Tooltip \n                    contentStyle={{\"backgroundColor\": theme.palette.background.paper, \"color\": theme.palette.text.primary}}\n                    itemStyle={{ \"color\": theme.palette.text.primary }}\n                />\n                <Pie\n                    data={props.data}\n                    label={isSmallScreen ? false : piechartLabelRenderer}\n                    startAngle={90}\n                    endAngle={-270}\n                    outerRadius=\"70%\"\n                    innerRadius=\"35%\"\n                    stroke={theme.palette.background.paper}\n                    nameKey={props.nameKey}\n                    dataKey={props.dataKey}\n                >\n                    {props.data.map((entry, index) => (\n                        <Cell key={`cell-${props.id}-${index}`} fill={COLORS[index % COLORS.length]}/>\n                    ))}\n                </Pie>\n            </PieChart>\n        </ResponsiveContainer>\n    );\n}\n","import React, { useState } from \"react\";\n\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { Typography, Grid } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useMediaQuery } from \"@mui/material\";\nimport moment from \"moment\";\n\nimport Stats from \"./Stats\";\nimport StatPieChart from \"./Piechart\";\n\nimport { COLORS, dateFormatter, countFormatter } from \"../util/charts\";\nimport {useDays} from \"./DaysProvider\";\n\nconst VERSION_COUNT = 10;\n\nexport default function InstanceStats() {\n    const [ count, setCount ] = useState();\n    const [ instancesData, setInstancesData ] = useState([]);\n    const [ versionsData, setVersionsData ] = useState([]);\n    const [ stableVersionsData, setStableVersionsData ] = useState([]);\n    const [ rcVersionsData, setRcVersionsData ] = useState([]);\n\n    const theme = useTheme();\n    const {days} = useDays()\n\n    const isSmallScreen = useMediaQuery(theme.breakpoints.down('lg'));\n\n    const onData = (d) => {\n        let versions = [];\n        let stableVersions = [];\n        let rcVersions = [];\n        const otherVersions = {\n            version: \"Others\",\n            count: 0\n        };\n        const otherStableVersions = {\n            version: \"Others\",\n            count: 0\n        };;\n        const otherRcVersions = {\n            version: \"Others\",\n            count: 0\n        };;\n        for (const version in d.versions) {\n            const entry = {\n                version: version,\n                count: d.versions[version]\n            }\n            if (versions.length < VERSION_COUNT - 1) {\n                versions.push(entry);\n            } else {\n                otherVersions.count += d.versions[version];\n            }\n\n            if (version.includes(\"rc\")) {\n                if (rcVersions.length < VERSION_COUNT - 1) {\n                    rcVersions.push(entry);\n                } else {\n                    otherRcVersions.count += d.versions[version];\n                }\n            } else {\n                if (stableVersions.length < VERSION_COUNT - 1) {\n                    stableVersions.push(entry);\n                } else {\n                    otherStableVersions.count += d.versions[version];\n                }\n            }\n        };\n\n        if (otherVersions.count > 0) {\n            versions.push(otherVersions);\n        }\n        if (otherRcVersions.count > 0) {\n            rcVersions.push(otherRcVersions);\n        }\n        if (otherStableVersions.count > 0) {\n            stableVersions.push(otherStableVersions);\n        }\n\n        let instances = [];\n        for (const entry of d.histogram.slice(1, -1)) {\n            const start = moment(entry.start).valueOf();\n            instances.push({\n                start: start,\n                count: entry.count\n            });\n        }\n\n        setCount(d.count);\n        setInstancesData(instances);\n        setVersionsData(versions);\n        setStableVersionsData(stableVersions);\n        setRcVersionsData(rcVersions);\n    }\n\n    const instanceTooltipLabelFormatter = (label) => {\n        return dateFormatter(label);\n    }\n\n    const instanceTooltipFormatter = (value, name, props) => {\n        return [countFormatter(value), name];\n    }\n\n    return (\n        <Stats title={`Instance stats (past ${days} days)`} stats={`instance_stats_${days}d.json`} onData={onData}>\n            <p>Total unique instances: {count}</p>\n\n            <Typography variant=\"subtitle1\">\n                Unique instances per hour\n            </Typography>\n\n            <ResponsiveContainer width=\"100%\" aspect={isSmallScreen ? 1 : 1.78}>\n                <AreaChart data={instancesData}>\n                    <defs>\n                        <linearGradient id=\"instanceGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor={COLORS[0]} stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor={COLORS[0]} stopOpacity={0} />\n                        </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDashArray=\"3 3\" />\n                    <XAxis \n                        dataKey=\"start\" \n                        angle=\"-60\" \n                        textAnchor=\"end\"\n                        interval=\"preserveStartAndEnd\"\n                        domain={[\"dataMin\", \"dataMax\"]}\n                        scale=\"time\" \n                        type=\"number\" \n                        tickFormatter={dateFormatter} \n                        height={150}\n                        axisLine={{stroke: theme.palette.text.secondary}}\n                        tickLine={{stroke: theme.palette.text.secondary}}\n                        tick={{fill: theme.palette.text.secondary}}\n                    />\n                    <YAxis \n                        tickFormatter={countFormatter}\n                        axisLine={{stroke: theme.palette.text.secondary}}\n                        tickLine={{stroke: theme.palette.text.secondary}}\n                        tick={{fill: theme.palette.text.secondary}}\n                    />\n                    <Tooltip \n                        labelFormatter={instanceTooltipLabelFormatter} \n                        formatter={instanceTooltipFormatter} \n                        contentStyle={{\"backgroundColor\": theme.palette.background.paper, \"color\": theme.palette.text.primary}}\n                    />\n                    <Legend />\n                    <Area type=\"monotone\" dataKey=\"count\" stroke={COLORS[0]} fillOpacity={1} fill=\"url(#instanceGradient)\" name=\"Instances\" />\n                </AreaChart>\n            </ResponsiveContainer>\n\n            <Typography variant=\"subtitle1\">\n                OctoPrint version distribution\n            </Typography>\n\n            <StatPieChart data={versionsData} nameKey=\"version\" dataKey=\"count\" id=\"octoprintVersions\" />\n\n            <Typography variant=\"subtitle2\">\n                ... stable vs release candidates\n            </Typography>\n\n            <Grid container>\n                <Grid item xs={12} md={6}>\n                    <StatPieChart data={stableVersionsData} nameKey=\"version\" dataKey=\"count\" id=\"octoprintStableVersions\" />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <StatPieChart data={rcVersionsData} nameKey=\"version\" dataKey=\"count\" id=\"octoprintRcVersions\" />\n                </Grid>\n            </Grid>\n\n        </Stats>\n    );\n}","import React, { useState } from \"react\";\n\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { Typography } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useMediaQuery } from \"@mui/material\";\nimport moment from \"moment\";\n\nimport Stats from \"./Stats\";\n\nimport { COLORS, dateFormatter, durationFormatter } from \"../util/charts\";\nimport {useDays} from \"./DaysProvider\";\n\nexport default function PrintingStats() {\n    const [ total, setTotal ] = useState();\n    const [ printingData, setPrintingData ] = useState([]);\n\n    const theme = useTheme();\n    const {days} = useDays()\n\n    const isSmallScreen = useMediaQuery(theme.breakpoints.down('lg'));\n\n    const onData = (d) => {\n        let totals = [];\n        for (const entry of d.histogram.slice(1, -1)) {\n            const start = moment(entry.start).valueOf();\n            totals.push({\n                start: start,\n                count: entry.count\n            });\n        }\n\n        setTotal(d.total);\n        setPrintingData(totals);\n    }\n\n    const histogramTooltipLabelFormatter = (label) => {\n        return dateFormatter(label);\n    }\n\n    const histogramTooltipFormatter = (value, name, props) => {\n        return [durationFormatter(value), name];\n    }\n\n    return (\n        <Stats title={`Printing stats (past ${days} days)`} stats={`printing_stats_${days}d.json`} onData={onData}>\n            <p>Total duration of all prints: {moment.duration(total * 1000).humanize()}</p>\n\n            <Typography variant=\"subtitle1\">\n                Printing duration per hour\n            </Typography>\n\n            <ResponsiveContainer width=\"100%\" aspect={isSmallScreen ? 1 : 1.78}>\n                <AreaChart data={printingData}>\n                    <defs>\n                        <linearGradient id=\"printingGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor={COLORS[0]} stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor={COLORS[0]} stopOpacity={0} />\n                        </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDashArray=\"3 3\" />\n                    <XAxis \n                        dataKey=\"start\" \n                        angle=\"-60\" \n                        textAnchor=\"end\"\n                        interval=\"preserveStartAndEnd\"\n                        domain={[\"dataMin\", \"dataMax\"]}\n                        scale=\"time\" \n                        type=\"number\" \n                        tickFormatter={dateFormatter} \n                        height={150}\n                        axisLine={{stroke: theme.palette.text.secondary}}\n                        tickLine={{stroke: theme.palette.text.secondary}}\n                        tick={{fill: theme.palette.text.secondary}}\n                    />\n                    <YAxis \n                        tickFormatter={durationFormatter}\n                        axisLine={{stroke: theme.palette.text.secondary}}\n                        tickLine={{stroke: theme.palette.text.secondary}}\n                        tick={{fill: theme.palette.text.secondary}}\n                    />\n                    <Tooltip \n                        labelFormatter={histogramTooltipLabelFormatter} \n                        formatter={histogramTooltipFormatter} \n                        contentStyle={{\"backgroundColor\": theme.palette.background.paper, \"color\": theme.palette.text.primary}}\n                    />\n                    <Legend />\n                    <Area type=\"monotone\" dataKey=\"count\" stroke={COLORS[0]} fillOpacity={1} fill=\"url(#printingGradient)\" name=\"Printing Duration\" />\n                </AreaChart>\n            </ResponsiveContainer>\n        </Stats>\n    );\n}","import React, { useState } from \"react\";\n\nimport { Grid, Typography } from \"@mui/material\";\nimport { useTheme } from '@mui/material/styles'; \nimport { useMediaQuery } from \"@mui/material\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport moment from \"moment\";\n\nimport Stats from \"./Stats\";\nimport StatPieChart from \"./Piechart\";\n\nimport { COLORS, dateFormatter, countFormatter } from \"../util/charts\";\nimport {useDays} from \"./DaysProvider\";\n\nconst VERSION_COUNT = 10;\n\nexport default function InstanceStats() {\n    const [ instancesData, setInstancesData ] = useState([]);\n    const [ versionsData, setVersionsData ] = useState([]);\n    const [ py2VersionsData, setPy2VersionsData ] = useState([]);\n    const [ py3VersionsData, setPy3VersionsData ] = useState([]);\n    const [ py2vs3Data, setPy2vs3Data ] = useState([]);\n\n    const theme = useTheme();\n    const {days} = useDays()\n\n    const isSmallScreen = useMediaQuery(theme.breakpoints.down('lg'));\n\n    const onData = (d) => {\n        let versions = [];\n        const otherVersions = {\n            version: \"Others\",\n            count: 0\n        };\n        let py2 = 0;\n        let py3 = 0;\n        let py2Versions = [];\n        let py3Versions = [];\n        const otherPy2Versions = {\n            version: \"Others\",\n            count: 0\n        };\n        const otherPy3Versions = {\n            version: \"Others\",\n            count: 0\n        };\n\n        for (const version in d.versions) {\n            if (versions.length < VERSION_COUNT - 1) {\n                versions.push({\n                    version: version,\n                    count: d.versions[version].instances\n                });\n            } else {\n                otherVersions.count += d.versions[version].instances;\n            }\n\n            if (version.startsWith(\"2.\")) {\n                py2 += d.versions[version].instances;\n                if (py2Versions.length < VERSION_COUNT - 1) {\n                    py2Versions.push({\n                        version: version,\n                        count: d.versions[version].instances\n                    });\n                } else {\n                    otherPy2Versions.count += d.versions[version].instances;\n                }\n            } else if (version.startsWith(\"3.\")) {\n                py3 += d.versions[version].instances;\n                if (py3Versions.length < VERSION_COUNT - 1) {\n                    py3Versions.push({\n                        version: version,\n                        count: d.versions[version].instances\n                    });\n                } else {\n                    otherPy3Versions.count += d.versions[version].instances;\n                }\n            }\n        };\n        if (otherVersions.count > 0) {\n            versions.push(otherVersions);\n        }\n        if (py2Versions.length > 0) {\n            py2Versions.push(otherPy2Versions);\n        }\n        if (py3Versions.length > 0) {\n            py3Versions.push(otherPy3Versions);\n        }\n\n        let instances = [];\n        for (const entry of d.histogram.slice(1, -1)) {\n            const start = moment(entry.start).valueOf();\n            instances.push({\n                start: start,\n                python2: entry.python2,\n                python3: entry.python3,\n            });\n        }\n\n        setVersionsData(versions);\n        setPy2VersionsData(py2Versions);\n        setPy3VersionsData(py3Versions);\n        setPy2vs3Data([\n            {\n                version: \"Python 2\",\n                count: py2\n            },\n            {\n                version: \"Python 3\",\n                count: py3\n            }\n        ]);\n        setInstancesData(instances);\n    }\n\n    const instanceTooltipLabelFormatter = (label) => {\n        return dateFormatter(label);\n    }\n\n    const instanceTooltipFormatter = (value, name, props) => {\n        return [countFormatter(value), name];\n    }\n\n    return (\n        <Stats title={`Python stats (past ${days} days)`} stats={`python_stats_${days}d.json`} onData={onData}>\n            <Typography variant=\"subtitle1\">\n                Python 2 vs 3\n            </Typography>\n\n            <Grid container>\n                <Grid item xs={12} md={5}>\n                    <StatPieChart data={py2vs3Data} nameKey=\"version\" dataKey=\"count\" id=\"py2vs3\" legendBelow />\n                </Grid>\n                <Grid item xs={12} md={7}>\n                    <ResponsiveContainer width=\"100%\" aspect={isSmallScreen ? 1 : 1.78}>\n                        <LineChart width={400} height={400} data={instancesData}>\n                            <CartesianGrid strokeDashArray=\"3 3\" />\n                            <XAxis \n                                dataKey=\"start\" \n                                angle=\"-60\" \n                                textAnchor=\"end\"\n                                interval=\"preserveStartAndEnd\"\n                                domain={[\"dataMin\", \"dataMax\"]}\n                                scale=\"time\" \n                                type=\"number\" \n                                tickFormatter={dateFormatter} \n                                height={150}\n                                axisLine={{stroke: theme.palette.text.secondary}}\n                                tickLine={{stroke: theme.palette.text.secondary}}\n                                tick={{fill: theme.palette.text.secondary}}\n                            />\n                            <YAxis \n                                axisLine={{stroke: theme.palette.text.secondary}}\n                                tickLine={{stroke: theme.palette.text.secondary}}\n                                tick={{fill: theme.palette.text.secondary}}\n                            />\n                            <Tooltip \n                                labelFormatter={instanceTooltipLabelFormatter} \n                                formatter={instanceTooltipFormatter} \n                                contentStyle={{\"backgroundColor\": theme.palette.background.paper, \"color\": theme.palette.text.primary}}\n                            />\n                            <Legend />\n                            <Line dataKey=\"python2\" dot={false} strokeWidth={2} stroke={COLORS[0]} name=\"Python 2\" />\n                            <Line dataKey=\"python3\" dot={false} strokeWidth={2} stroke={COLORS[1]} name=\"Python 3\" />\n                        </LineChart>\n                    </ResponsiveContainer>\n                </Grid>\n            </Grid>\n\n            <Typography variant=\"subtitle1\">\n                Python version distribution\n            </Typography>\n\n            <StatPieChart data={versionsData} nameKey=\"version\" dataKey=\"count\" id=\"pythonVersions\" />\n\n            <Typography variant=\"subtitle1\">\n                Individual Python version distribution for 2.x and 3.x\n            </Typography>\n\n            <Grid container>\n                <Grid item xs={12} md={6}>\n                    <StatPieChart data={py2VersionsData} nameKey=\"version\" dataKey=\"count\" id=\"python2Versions\" />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <StatPieChart data={py3VersionsData} nameKey=\"version\" dataKey=\"count\" id=\"python3Versions\" />\n                </Grid>\n            </Grid>\n        </Stats>\n    );\n}","import React, { useState } from \"react\";\n\nimport Typography from \"@mui/material/Typography\";\n\nimport Stats from \"./Stats\";\nimport StatPieChart from \"./Piechart\";\nimport {useDays} from \"./DaysProvider\";\n\nconst LOOKUP = {\n    linux: \"Linux\",\n    windows: \"Windows\",\n    macos: \"Mac\",\n    freebsd: \"FreeBSD\"\n}\n\nexport default function ServerStats() {\n    const [ coreData, setCoreData ] = useState([]);\n    const [ osData, setOsData ] = useState([]);\n    const [ bitsData, setBitsData ] = useState([]);\n\n    const {days} = useDays()\n\n    const onData = (d) => {\n        let cores = [];\n        let os = [];\n        let bits = [];\n\n        const otherCores = {\n            name: \"Other\",\n            count: 0\n        };\n\n        const coreStats = Object.keys(d.cores);\n        coreStats.sort((a, b) => d.cores[b].instances - d.cores[a].instances);\n        coreStats.forEach((entry) => {\n            if (cores.length <= 10 && entry > 0) {\n                cores.push({\n                    name: entry,\n                    count: d.cores[entry].instances\n                })\n            } else {\n                otherCores.count += d.cores[entry].instances;\n            }\n        });\n        if (otherCores.count > 0) {\n            cores.push(otherCores);\n        }\n\n        for (const entry in d.os) {\n            os.push({\n                name: LOOKUP[entry],\n                count: d.os[entry].instances\n            });\n        };\n\n        for (const entry in d.bits) {\n            bits.push({\n                name: entry,\n                count: d.bits[entry].instances\n            })\n        }\n\n        setCoreData(cores);\n        setOsData(os);\n        setBitsData(bits);\n    }\n\n    return (\n        <Stats title={`Server Environment stats (past ${days} days)`} stats={`server_environment_stats_${days}d.json`} onData={onData}>\n            <Typography variant=\"subtitle1\">\n                Operating System\n            </Typography>\n            <StatPieChart data={osData} nameKey=\"name\" dataKey=\"count\" id=\"os\" />\n            <Typography variant=\"subtitle1\">\n                Bits\n            </Typography>\n            <StatPieChart data={bitsData} nameKey=\"name\" dataKey=\"count\" id=\"bits\" />\n            <Typography variant=\"subtitle1\">\n                Core count\n            </Typography>\n            <StatPieChart data={coreData} nameKey=\"name\" dataKey=\"count\" id=\"cores\" />\n         </Stats>\n    );\n}","import React, { useState } from \"react\";\n\nimport Typography from \"@mui/material/Typography\";\n\nimport Stats from \"./Stats\";\nimport StatPieChart from \"./Piechart\";\nimport {useDays} from \"./DaysProvider\";\n\nconst COUNT = 10;\n\nexport default function ClientStats(props) {\n    const [ browserTop10Data, setBrowserTop10Data ] = useState([]);\n    const [ osTop10Data, setOsTop10Data ] = useState([]);\n\n    const {days} = useDays()\n\n    const onData = (d) => {\n        let browserTop10 = [], osTop10 = [];\n\n        const otherBrowser = {\n            name: \"Other\",\n            count: 0\n        };\n        const otherOs = {\n            name: \"Other\",\n            count: 0\n        };\n\n        for (const browser in d.browser) {\n            if (browserTop10.length < COUNT) {\n                browserTop10.push({\n                    name: browser,\n                    count: d.browser[browser].instances\n                });\n            } else {\n                otherBrowser.count += d.browser[browser].instances;\n            }\n        };\n        if (otherBrowser.count > 0) {\n            browserTop10.push(otherBrowser);\n        }\n\n        for (const os in d.os) {\n            if (osTop10.length < COUNT) {\n                osTop10.push({\n                    name: os,\n                    count: d.os[os].instances\n                });\n            } else {\n                otherOs.count += d.os[os].instances;\n            }\n        };\n        if (otherOs.count > 0) {\n            osTop10.push(otherOs);\n        };\n\n        setBrowserTop10Data(browserTop10);\n        setOsTop10Data(osTop10);\n    }\n\n    return (\n        <Stats title={`Client Environment stats (past ${days} days)`} stats={`client_environment_stats_${days}d.json`} onData={onData}>\n            <Typography variant=\"subtitle1\">\n                Browser\n            </Typography>\n            <StatPieChart data={browserTop10Data} nameKey=\"name\" dataKey=\"count\" id=\"browserTop10\" />\n            <Typography variant=\"subtitle1\">\n                Operating System\n            </Typography>\n            <StatPieChart data={osTop10Data} nameKey=\"name\" dataKey=\"count\" id=\"osTop10\" />\n         </Stats>\n    );\n}","import React, { useState } from \"react\";\n\nimport Typography from \"@mui/material/Typography\";\n\nimport Stats from \"./Stats\";\nimport StatPieChart from \"./Piechart\";\nimport {useDays} from \"./DaysProvider\";\n\nconst FW_COUNT = 10;\n\nexport default function InstanceStats() {\n    const [ firmwareTop10Data, setFirmwareTop10Data ] = useState([]);\n    const [ notableFirmwareData, setNotableFirmwareData ] = useState([]);\n\n    const {days} = useDays()\n\n    const onData = (d) => {\n        let firmwareTop10 = [];\n        const otherFw = {\n            name: \"Other\",\n            count: 0\n        };\n\n        const notable = [\n            {\n                name: \"Prusa Marlin\",\n                matcher: name => name.startsWith(\"Prusa-Firmware\"),\n                count: 0\n            },\n            {\n                name: \"Creality Marlin\",\n                matcher: name => name.indexOf(\"Creality\") !== -1,\n                count: 0\n            },\n            {\n                name: \"TH3D Marlin\",\n                matcher: name => name.indexOf(\"TH3D\") !== -1,\n                count: 0\n            },\n            {\n                name: \"Marlin\",\n                matcher: name => name.startsWith(\"Marlin\"),\n                count: 0\n            },\n            {\n                name: \"Klipper\",\n                matcher: name => name.startsWith(\"Klipper\"),\n                count: 0\n            },\n            {\n                name: \"Repetier\",\n                matcher: name => name.startsWith(\"Repetier\"),\n                count: 0\n            },\n            {\n                name: \"Smoothieware\",\n                matcher: name => name.startsWith(\"Smoothieware\"),\n                count: 0\n            },\n            {\n                name: \"RepRapFirmware\",\n                matcher: name => name.startsWith(\"RepRapFirmware\"),\n                count: 0\n            },\n            {\n                name: \"Sailfish\",\n                matcher: name => name.startsWith(\"Sailfish\"),\n                count: 0\n            },\n            {\n                name: \"Malyan\",\n                matcher: name => name.startsWith(\"Malyan\"),\n                count: 0\n            }, \n            {\n                name: \"ANET A8\",\n                matcher: name => name.startsWith(\"ANET_A8\"),\n                count: 0\n            }, \n        ];\n         \n        for (const fw in d.names) {\n            if (firmwareTop10.length < FW_COUNT - 1) {\n                firmwareTop10.push({\n                    name: fw,\n                    count: d.names[fw].instances,\n                });\n            }\n            for (const n of notable) {\n                if (n.matcher(fw)) {\n                    n.count += d.names[fw].instances;\n                    break;\n                }\n            }\n        }\n        if (otherFw.count > 0) {\n            firmwareTop10.push(otherFw);\n        }\n\n        notable.sort((a, b) => b.count - a.count);\n\n        setFirmwareTop10Data(firmwareTop10);\n        setNotableFirmwareData(notable);\n    }\n\n    return (\n        <Stats title={`Firmware stats (past ${days} days)`} stats={`firmware_stats_${days}d.json`} onData={onData}>\n            <Typography variant=\"subtitle1\">\n                Firmware top 10\n            </Typography>\n            <StatPieChart data={firmwareTop10Data} nameKey=\"name\" dataKey=\"count\" id=\"firmwareTop10\" legendBelow />\n            <Typography variant=\"subtitle1\">\n                Notable firmware groups\n            </Typography>\n            <StatPieChart data={notableFirmwareData} nameKey=\"name\" dataKey=\"count\" id=\"notableFirmware\" />\n         </Stats>\n    );\n}","import React from \"react\";\n\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport {styled} from \"@mui/material\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Box from \"@mui/material/Box\"\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Container from \"@mui/material/Container\";\nimport Link from \"@mui/material/Link\";\n\nimport DarkModeToggle from \"./components/DarkModeToggle\";\nimport DaysToggle from \"./components/DaysToggle\";\nimport InstanceStats from \"./components/InstanceStats\";\nimport PrintingStats from \"./components/PrintingStats\";\nimport PythonStats from \"./components/PythonStats\";\nimport ServerStats from \"./components/ServerStats\";\nimport ClientStats from \"./components/ClientStats\";\nimport FirmwareStats from \"./components/FirmwareStats\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport DaysProvider from \"./components/DaysProvider\";\n\n// We have a sticky AppBar, so offset the content by using the CSS applied to the toolbar\nconst Offset = styled('div')(({theme})=> theme.mixins.toolbar)\n\nexport default function App(props) {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', { noSsr: true });\n    const [darkMode, setDarkMode] = useLocalStorage(\"enableDarkMode\", prefersDarkMode);\n\n    const palette = darkMode ? \"dark\" : \"light\";\n    const darkModeTheme = createTheme({\n        palette: {\n            mode: palette\n        }\n    })\n\n    const handleDarkModeToggle = () => {\n        setDarkMode(!darkMode);\n    }\n\n    return (\n\n        <ThemeProvider theme={darkModeTheme}>\n            <DaysProvider>\n                <Main darkMode={darkMode} handleDarkModeToggle={handleDarkModeToggle} />\n            </DaysProvider>\n        </ThemeProvider>\n    );\n}\n\nfunction Main ({darkMode, handleDarkModeToggle}) {\n    const Navbar = () => {\n        return (\n            <AppBar>\n                <Toolbar sx={{flexWrap: 'wrap'}}>\n                    <Box display={\"flex\"} flexGrow={1}>\n                        data.octoprint.org\n                    </Box>\n                    <DaysToggle />\n                    <DarkModeToggle darkMode={darkMode} onChange={handleDarkModeToggle} />\n                </Toolbar>\n            </AppBar>\n        )\n    }\n\n    return (\n        <>\n            <CssBaseline />\n            <Navbar />\n            <Offset />\n            <Container component={\"main\"} maxWidth=\"lg\" sx={{mt: {lg: 4}, mb: 4, \"& > *\": {my: 2}}}>\n                <InstanceStats />\n                <PrintingStats />\n                <PythonStats />\n                <ServerStats />\n                <ClientStats />\n                <FirmwareStats />\n            </Container>\n            <Box component={\"footer\"} sx={{textAlign: \"center\", p: \"1em\"}}>\n                © 2021 <Link href=\"https://octoprint.org\" target=\"_blank\" rel=\"noreferrer noopener\" color=\"inherit\" underline=\"always\">OctoPrint</Link> &middot; <Link href=\"https://octoprint.org/imprint/\" target=\"_blank\" rel=\"noreferrer noopener\" color=\"inherit\" underline=\"always\">Imprint</Link> &middot; <Link href=\"https://octoprint.org/privacy/\" target=\"_blank\" rel=\"noreferrer noopener\" color=\"inherit\" underline=\"always\">Privacy Policy</Link><br />\n                Based on tracking data from the Anonymous Usage Tracking plugin, refer to <Link href=\"https://tracking.octoprint.org\" target=\"_blank\" rel=\"noreferrer noopener\" color=\"inherit\" underline=\"always\">tracking.octoprint.org</Link> for details.\n            </Box>\n        </>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}